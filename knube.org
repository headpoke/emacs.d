* Bootstrap
** Version and os check
   #+begin_src emacs-lisp
   (when (version< emacs-version "27")
   (warn "Your Emacs might be too old -- This setup was made for emacs 27
   or newer. Proceed with caution!"))
   
   (defconst *is-a-mac* (eq system-type 'darwin))

   (when (not *is-a-mac*)
   (warn "This config was made for my Macbook Air running macOS. Proceed with caution."))
   #+end_src
** A few default settings
   #+begin_src emacs-lisp
   (setq-default debug-on-error         t
                 message-log-max        t
                 load-prefer-newer      t
                 ad-redefinition-action 'accept)
   #+end_src
** Garbage collection
   #+begin_src emacs-lisp
   (setq gc-cons-threshold  most-positive-fixnum
         gc-cons-percentage 0.6
         debug-on-error     t)
   (add-hook 'emacs-startup-hook
              (lambda () (setq gc-cons-threshold  (* 32 1024 1024)
                               gc-cons-percentage 0.1
                               debug-on-error     nil)))
   #+end_src
** custom file
   #+begin_src emacs-lisp
   (setq custom-file (concat user-emacs-directory "custom.el"))
   (load custom-file 'noerror)
   #+end_src

** straight.el and use-package
   [[https://github.com/raxod502/straight.el][https://github.com/raxod502/straight.el]]
   #+begin_src emacs-lisp
   (setq straight-recipes-gnu-elpa-use-mirror    t
         straight-repository-branch              "develop"
         straight-vc-git-default-clone-depth     1
         straight-check-for-modifications        '(find-when-checking))

   (defvar bootstrap-version)
   (let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
   #+end_src
   The integration with [[https://github.com/jwiegley/use-package][use-package]] is great
   #+begin_src emacs-lisp
   (straight-use-package 'use-package)
   (setq straight-enable-use-package-integration t
         straight-use-package-by-default         t)
   #+end_src

** auto-compile
   https://github.com/emacscollective/auto-compile
   #+begin_src emacs-lisp
   (use-package auto-compile
   :ensure t
   :config
   (auto-compile-on-load-mode)
   (auto-compile-on-save-mode)
   (setq auto-compile-display-buffer nil
         auto-compile-mode-line-counter t)
   #+end_src

** no-littering
   Keep .emacs.d/ nice and clean. https://github.com/emacscollective/no-littering
   #+begin_src emacs-lisp
   (use-package no-littering
   :ensure t
   :config
   ;; remove littering from recent files on dashboard
   (require 'recentf)
   (add-to-list 'recentf-exclude no-littering-var-directory)
   (add-to-list 'recentf-exclude no-littering-etc-directory))
   #+end_src

** killring
   We have buttloads of memory, might as well use it.
   #+begin_src emacs-lisp
   (setq global-mark-ring-max 500
         mark-ring-max        500
         kill-ring-max        500)
   #+end_src

** macos
   #+begin_src emacs-lisp
   (when *is-a-mac*
   (setq mac-command-modifier 'meta)
   (setq mac-option-modifier nil)
   (setq mac-function-modifier 'hyper))

   (use-package osx-trash
   :if *is-a-mac*
   :config
   (osx-trash-setup)
   (setq-default delete-by-moving-to-trash t))

   (setq ns-pop-up-frames nil)
   #+end_src

** exec-path-from-shell
   env and path variables is some voodoo magic stuff that never works the way you'd
   like. [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] makes it a bit easier to deal with.
   #+begin_src emacs-lisp
   (use-package exec-path-from-shell
   :config
   (exec-path-from-shell-initialize)
   (exec-path-from-shell-copy-envs '("LANG"
                                     "LC_ALL"
                                     "GPG_AGENT_INFO"
                                     "SSH_AUTH_SOCK")))
   #+end_src

** utf-8
   Not sure if I need all these...
   #+begin_src emacs-lisp
   (setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding
   (set-language-environment 'utf-8)
   ;;(set-keyboard-coding-system 'utf-8-mac) ; For old Carbon emacs on OS X only
   (setq locale-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (set-selection-coding-system 'utf-8)
   (prefer-coding-system 'utf-8)
   #+end_src

** mouse
   Default emacs mouse scrolling is terrible. This makes it better. 
   #+begin_src emacs-lisp
   (setq scroll-step                     1
         scroll-conservatively           101
	 scroll-preserve-screen-position 'always
	 next-screen-context-lines       5
	 debugger-stack-frame-as-list    t
	 mouse-wheel-follow-mouse        t
	 mouse-wheel-scroll-amount       '(1 ((shift) . 1))
	 mouse-wheel-progressive-speed   nil
	 mouse-yank-at-point             t)
#+end_src

** maximized
   Start maximized
   #+begin_src emacs-lisp
   (add-hook 'emacs-startup-hook (lambda () (toggle-frame-maximized)))
   (when *is-a-mac* (setq ns-use-native-fullscreen nil))
   #+end_src

* ivy

* keybindings

* evil

* org

* latex
